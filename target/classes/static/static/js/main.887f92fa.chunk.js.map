{"version":3,"sources":["services/BookService.js","components/SubmissionForm.js","components/Book.js","App.js","reportWebVitals.js","index.js"],"names":["BOOKS_API_URL","axios","get","catch","error","console","log","title","author","description","reply","post","then","response","id","put","delete","SubmissionForm","props","state","editTitle","bind","editAuthor","editDescription","addBook","editBook","deleteBook","prevProps","dataFromParent","this","setState","event","target","value","BookService","newBook","type","size","defaultValue","onChange","rows","cols","onClick","disabled","React","Component","Book","books","DataLoaded","NoConnection","selected","getBooks","data","book","className","map","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.887f92fa.chunk.js","sourcesContent":["import axios from 'axios'\n\n// Connection to the database. For now, this runs on localhost.\nconst BOOKS_API_URL = 'http://localhost:8080/books';\n\nclass BookService {\n    getBooks() {\n        return axios.get(BOOKS_API_URL).catch(function(error) {\n            console.log(\"Failed to establish database connection\")\n        });\n    }\n    \n    newBook(title, author, description) {\n        console.log(\"Adding a new book!\");\n        var reply = axios.post(BOOKS_API_URL, {\n            title: title,\n            author: author,\n            description: description\n        }).then(function (response) {\n            console.log(\"The server responded with:\" + response);\n        }).catch (function(error) {\n            console.log(\"The book could not be added\");\n            console.log(error);\n        });\n        console.log(\"The server replied with \"+reply);\n    }\n    \n    editBook(id, title, author, description) {\n        var reply = axios.put(BOOKS_API_URL+\"/\"+id, {\n            id: id,\n            title: title,\n            author: author,\n            description: description\n        }).then(function (response) {\n            console.log(response);\n        }).catch (function(error) {\n            console.log(\"The book could not be edited\");\n            console.log(\"Book URL: \"+BOOKS_API_URL+\"/\"+id);\n            console.log(error);\n        });\n        console.log(reply);\n    }\n    \n    deleteBook(id) {\n        var reply = axios.delete(BOOKS_API_URL+\"/\"+id).then(function(response) {\n            console.log(\"Server responded with: \" + response);\n        }).catch(function(error) {\n            console.log(\"Attempted to delete a book with ID \"+id);\n            console.log(\"The entry could not be deleted\");\n            console.log(\"Book URL: \"+BOOKS_API_URL+\"/\"+id);\n            console.log(error);\n        });\n        console.log(\"Server replied with \"+reply);\n        \n    }\n    \n}\n\nexport default new BookService();","import React from 'react';\nimport BookService from '../services/BookService';\n\nclass SubmissionForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: null,\n            title: '',\n            author: '',\n            description: ''\n        };\n        \n        this.editTitle = this.editTitle.bind(this);\n        this.editAuthor = this.editAuthor.bind(this);\n        this.editDescription = this.editDescription.bind(this);\n        \n        this.addBook = this.addBook.bind(this);\n        this.editBook = this.editBook.bind(this);\n        this.deleteBook = this.deleteBook.bind(this);\n    }\n    \n    componentDidUpdate(prevProps) {\n        if (prevProps.dataFromParent !== null && prevProps.dataFromParent.id !== this.props.dataFromParent.id) {\n            this.setState({\n                id: this.props.dataFromParent.id,\n                title: this.props.dataFromParent.title,\n                author: this.props.dataFromParent.author,\n                description: this.props.dataFromParent.description\n            });\n        } \n    }\n    \n    //Event Handlers for text field changes\n    editTitle(event) {\n        this.setState({title: event.target.value});\n    }\n    \n    editAuthor(event) {\n        this.setState({author: event.target.value});\n    }\n    \n    editDescription(event) {\n        this.setState({description: event.target.value});\n    }\n    \n    \n    //Event handlers for submitting the form\n    addBook(event) {\n        BookService.newBook(this.state.title, this.state.author, this.state.description).then((response) => {\n            console.log(response);\n        }).catch(function(error) {\n            console.log(error);\n        });\n    }\n    \n    editBook(event) {\n        BookService.editBook(this.state.id, this.state.title, this.state.author, this.state.description);\n    }\n    \n    deleteBook() {\n        BookService.deleteBook(this.state.id).then((response) => {\n            console.log(response);\n        }).catch(function(error) {\n            console.log(error);\n        });\n    }\n    \n    //Render the form\n    render() {\n        if (this.state.id === null) {\n            return (\n                    <form>\n                        <label>Title:</label><br/>\n                        <input type = 'text' size = '25' title = {this.state.title} defaultValue = '' onChange = {this.editTitle}/><br/>\n                \n                        <label>Author:</label><br/>\n                        <input type = 'text' size = '25' author = {this.state.author} defaultValue = '' onChange = {this.editAuthor}/><br/>\n                            \n                        <label>Description:</label><br/>\n                        <textarea rows = '6' cols = '32' description = {this.state.description} defaultValue = '' onChange = {this.editDescription}/><br/>\n                            \n                        <input type = 'submit' value = \"Save New\" onClick = {this.addBook}/>\n                        <input type = 'submit' value = \"Save\" disabled/>\n                        <input type = 'submit' value = \"Delete\" disabled/>\n                    \n                    </form>\n            );\n        } else {\n            return (\n                    <form>\n                        <label>Title: </label><br/>\n                        <input type = 'text' size = '25' title = {this.state.title} defaultValue = {this.state.title} onChange = {this.editTitle}/><br/>\n                        \n                        <label>Author:</label><br/>\n                        <input type = 'text' size = '25' author = {this.state.author} defaultValue = {this.state.author} onChange = {this.editAuthor}/><br/>\n                        \n                        <label>Description:</label><br/>\n                        <textarea rows = '6' cols = '32' description = {this.state.description} defaultValue = {this.state.description} onChange = {this.editDescription}/><br/>\n                                \n                        <input type = 'submit' value = \"Save New\" onClick = {this.addBook}/>\n                        <input type = 'submit' value = \"Save\" onClick = {this.editBook}/>\n                        <input type = 'submit' value = \"Delete\" onClick = {this.deleteBook}/>\n        \n                    </form>\n                    \n            );\n        }\n    }    \n}\n\nexport default SubmissionForm;","import React from 'react';\nimport BookService from '../services/BookService';\nimport SubmissionForm from './SubmissionForm';\n\nclass Book extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            books: [],\n            DataLoaded: false,\n            NoConnection: false,\n            selected: null\n        };\n    }\n    \n    //Fetch books from the database\n    componentDidMount() {    \n        BookService.getBooks().then((response) => {\n            this.setState({ books: response.data});\n            this.setState({ DataLoaded: true});\n        }).catch(function(error) {\n            console.log(\"Failed to load data\");\n        });\n    }\n    \n    selectBook(book) {\n        this.setState({selected: book});\n    }\n    \n    render() {\n        const {DataLoaded, NoConnection, books} = this.state;\n        if (!DataLoaded && !NoConnection) {\n            return (\"The booklist is loading\");\n        } else if (NoConnection){\n            return (\"Failed to connect to database\");\n        }\n        \n        return(\n            <div className=\"App\">\n                <ul>\n                    {this.state.books.map(\n                            book => \n                            <li onClick = {() => this.setState({selected: book})}>{book.title}</li>\n                    )}\n                </ul>\n\n                <div>\n                        <SubmissionForm dataFromParent = {this.state.selected}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Book;","import './App.css';\n\nimport React from 'react';\n\nimport Book from './components/Book'\n\nfunction App() {\n    \n    return (\n        <div>\n            <Book />\n        </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}